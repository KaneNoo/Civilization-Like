// <auto-generated />
using CivilizationAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CivilizationAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220623051710_PlayerCoinsAdded")]
    partial class PlayerCoinsAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FortuneWheelAPI.Models.Player", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("Coins")
                        .HasColumnType("int");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("FortuneWheelAPI.Models.PlayerPrize", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("PlayerID")
                        .HasColumnType("int");

                    b.Property<int>("PrizeID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PlayerID");

                    b.HasIndex("PrizeID");

                    b.ToTable("PlayersPrizes");
                });

            modelBuilder.Entity("FortuneWheelAPI.Models.Prize", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("Chance")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Prizes");
                });

            modelBuilder.Entity("FortuneWheelAPI.Models.Wheel", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<int>("PrizeID")
                        .HasColumnType("int");

                    b.HasKey("ID", "PrizeID");

                    b.HasIndex("PrizeID");

                    b.ToTable("Wheels");
                });

            modelBuilder.Entity("FortuneWheelAPI.Models.PlayerPrize", b =>
                {
                    b.HasOne("FortuneWheelAPI.Models.Player", "Player")
                        .WithMany("PlayerPrizes")
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FortuneWheelAPI.Models.Prize", "Prize")
                        .WithMany("PlayerPrizes")
                        .HasForeignKey("PrizeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Prize");
                });

            modelBuilder.Entity("FortuneWheelAPI.Models.Wheel", b =>
                {
                    b.HasOne("FortuneWheelAPI.Models.Prize", "Prize")
                        .WithMany("Wheels")
                        .HasForeignKey("PrizeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prize");
                });

            modelBuilder.Entity("FortuneWheelAPI.Models.Player", b =>
                {
                    b.Navigation("PlayerPrizes");
                });

            modelBuilder.Entity("FortuneWheelAPI.Models.Prize", b =>
                {
                    b.Navigation("PlayerPrizes");

                    b.Navigation("Wheels");
                });
#pragma warning restore 612, 618
        }
    }
}
