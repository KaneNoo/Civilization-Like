@inject IPrizeService PrizeService
@inject IWheelService WheelService


@if (PrizeService.Prizes == null || PrizeService.Prizes.Count <= 0)
{
    <h5>Список Призов пуст</h5>
}
else
{
    <div class="modal-body">
        <EditForm Model="Prizes">
            <table>
                @for (int i = 0; i < PrizeService.Prizes.Count; i++)
                {
                    <tr>
                        <th>Приз @(i + 1)</th>
                        <td>
                            <InputSelect @bind-Value="@SelectedPrizes[i]" @onchange="UpdateSelection">
                                @foreach (var prize in AvailablePrizes)
                                        {
                                    <option value="@prize.ID">@prize.Name</option>
                                        }
                            </InputSelect>
                        </td>
                    </tr>
                }
            </table>
        </EditForm>
    </div>
    <div class="modal-footer">
        <button type="button" class="btn btn-primary" @onclick="() => Add()">Подтвердить</button>
    </div>
}


@code {

    private string Message { get; set; } = "Загрузка форматов...";

    private List<Prize> AvailablePrizes { get; set; } = new();
    private List<Prize> SelectedPrizes { get; set; } = new();
    private List<Prize> Prizes { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await PrizeService.GetAll();
        AvailablePrizes = PrizeService.Prizes;
    }

    private void UpdateSelection(ChangeEventArgs e)
    {
        SelectedPrizes.Add(AvailablePrizes.FirstOrDefault(p => p.ID == int.Parse(e.Value.ToString())));
        AvailablePrizes.Remove(AvailablePrizes.FirstOrDefault(p => p.ID == int.Parse(e.Value.ToString())));
    }

    private async void Add()
    {
        var response = await WheelService.Add(SelectedPrizes.Select(p => p.ID).ToList());
    }


}